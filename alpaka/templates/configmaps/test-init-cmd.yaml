{{- if .Values.test.enabled }}
{{ $full_name := include "common.names.fullname" . }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $full_name }}-test-cmd
data:
    init_mysql.sh: |
      echo "> init_mysql.sh"
      # MySQL 준비될 때까지 대기 
      while ! mysqladmin ping -h {{ .Release.Name }}-mysql-headless --silent; do
          echo "waiting for mysql."
          sleep 5
      done     
      # 테스트용 DB 및 유저 만들기 
      mysql -h {{ .Release.Name }}-mysql-headless -u root -p{{ .Values.mysql.auth.password }} -e "
        CREATE DATABASE IF NOT EXISTS test;
        CREATE USER IF NOT EXISTS 'tester'@'%' IDENTIFIED BY 'testerpass';
        GRANT ALL PRIVILEGES ON test.* TO 'tester'@'%';
        # Debezium 을 위한 권한
        GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'tester'@'%';
      "
    jdbcsrc_reg_mysql.sh: |
      echo "> jdbcsrc_reg_mysql.sh"
      # 커넥트 준비될 때까지 대기 
      until $(curl --output /dev/null --silent --head --fail http://{{ $full_name }}-connect-test-jdbcsrc:8083); do
          echo "waiting for connect."
          sleep 5
      done    
      # 커넥터 등록
      curl -s -X POST http://{{ $full_name }}-connect-test-jdbcsrc:8083/connectors -H "Content-Type: application/json" -d '{
        "name": "jdbc_source_mysql",
        "config": {
            "mode": "bulk",
            "connection.url": "jdbc:mysql://{{ .Release.Name }}-mysql-headless:3306/test?serverTimezone=Asia/Seoul",
            "connection.user": "root",
            "connection.password": "{{ .Values.mysql.auth.password }}",
            "key.converter": "org.apache.kafka.connect.storage.StringConverter",
            "value.converter": "org.apache.kafka.connect.json.JsonConverter",
            "value.converter.schemas.enable": false,
            "poll.interval.ms": 3600000,
            "topic.prefix": "mysql-",
            "tasks.max": 1,
            "connector.class" : "io.confluent.connect.jdbc.JdbcSourceConnector",
            "tables.whitelist": "person"
          }
        }' | jq
    wait-ksqldb.sh: |
      echo "> run wait_ksqldb.sh"
      until $(curl --output /dev/null --silent --fail http://{{ .Release.Name }}-ksqldb:8088); do
          echo "waiting for ksqlDB."
          sleep 5
      done  
    # 테스트 실행 파일
    run_test.sh: |
      sleep 5
      echo "> run_test.sh"
      cd tests && pytest -s -p no:cacheprovider .
      # 디버깅용
      # sleep infinity
{{- end }}