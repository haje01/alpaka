{{ $broker := printf "%s-kafka-headless:9092" .Release.Name }}
{{- if .Values.test.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "common.names.fullname" . }}-test-code
data: 
  util.py: |
    from subprocess import run 

    def exec(cmds):
        out = run(cmds, capture_output=True)
        if out.returncode != 0:
            raise Exception(str(out.stderr.decode()))
        return out.stdout.decode()

  test_kafka.py: |
    import time 

    import pytest
    from retry import retry

    from util import exec 

    @pytest.fixture()
    @retry(tries=5, delay=5)
    def xs3rmdir():
        """S3 버킷내 테스트 용 임시 디렉토리 결과 디렉토리 제거."""
        print("[ ] xs3rmdir")
        ret = exec(['aws', 's3', 'rm', 's3://{{ required "test.s3sync.bucket must be entered" .Values.test.s3sync.bucket }}/{{ required "test.s3sync.topics_dir must be entered" .Values.test.s3sync.topics_dir}}', '--recursive'])
        print("[v] xs3rmdir")
        return ret

    def kafka_topics(cmds):
        return exec(['kafka-topics.sh', '--bootstrap-server={{ $broker }}'] + cmds)

    def test_topic_list():
        """기본 토픽 나열."""
        ret = kafka_topics(["--list"])
        ans = set([
            '__consumer_offsets', 
            'srccon-connect-configs', 
            'srccon-connect-offsets', 
            'srccon-connect-status',
            'sinkcon-connect-configs', 
            'sinkcon-connect-offsets', 
            'sinkcon-connect-status'
            ]) 
        com = ans & set(ret.split('\n'))
        assert len(com) == 7

    def test_srcsink_con(xs3rmdir):
        """JDBC 소스 커넥터, S3 싱크 커넥터 테스트 (MySQL)."""
        from util import exec

        ## 소스 커넥터 테스트 
        # 테이블 초기화 
        exec(['python3', '-m', 'kfktest.table', 'mysql', '--db-host', '{{ .Release.Name }}-mysql-headless.default.svc.cluster.local', '--db-user', 'root', '--db-passwd', '{{ .Values.mysql.auth.password }}'])
        # 테이블에 값 채우기 
        exec(['python3', '-m', 'kfktest.inserter', 'mysql', '--db-host', '{{ .Release.Name }}-mysql-headless.default.svc.cluster.local', '--db-user', 'root', '--db-passwd', '{{ .Values.mysql.auth.password }}'])
        # 잠시 후 토픽 확인 
        print("Waiting enough for the Kafka topic finish.")
        ret = exec(['/bin/sh', '-c', 'sleep 30 && kafka-console-consumer.sh --bootstrap-server={{ .Release.Name }}-kafka-headless:9092 --topic=mysql-person --from-beginning --timeout-ms=30000 | wc -l'])
        assert '10000' in ret

        ## 싱크 커넥트 테스트
        # 커넥터 등록
        exec(['sinkcon_reg_mysql.sh'])
        # 업로드 대기 
        print("Waiting enough for the S3 to finish.")
        time.sleep(20)
        # S3 에서 받기
        exec(['aws', 's3', 'sync', 's3://{{ .Values.test.s3sync.bucket }}/{{ .Values.test.s3sync.topics_dir }}', '/tmp/alpaka'])
        # 압축 풀기
        exec(['find', '/tmp/alpaka', '-name', '*.gz', '-exec', 'gunzip', '{}', ';'])
        # json 파일 내리기
        ret = exec(['find', '/tmp/alpaka', '-name', '*.json'])
        # 파티션 수와 같은 파일 존재
        lines = [l for l in ret.split('\n') if len(l) > 0]
        assert len(lines) == 8


  test_ksql.py: |
    import json 
    import subprocess
    from dateutil.parser import parse as dt_parse


    def ksql_exec(sql, mode='ksql', _props=None, timeout=None):
        """ksqlDB 명령 실행

        sql (str): ksqlDB SQL 명령
        mode (str): 호출 방식. ksql, query 중 하나. ksql, query 중 하나 (기본값 ksql)
            ksql: SELECT 문 외
            query: SELECT 문

        Returns:
            dict: 하나의 JSON 인 경우
            list: JSON Lines 인 경우
        """
        print(f"ksql_exec '{sql}'")
        assert mode in ('ksql', 'query')
        sql = sql.strip().replace('\n', '\\n')
        if not sql.endswith(';'):
            sql += ';'
        if _props is None:
            props = ''
        else:
            assert type(_props) is dict
            props = f', "streamsProperties": {json.dumps(_props)}'

        timeout = f"-m {timeout}" if timeout is not None else ''
        cmd = ["curl", "-s"]
        if len(timeout) > 0:
            cmd.append(timeout)
        data = f'{{`{{"ksql": "{sql}" {props}}}`}}'
        cmd += [
            "-X", "POST", f"http://{{ .Release.Name }}-ksqldb:8088/{mode}",
            "-H", "'content-type: application/vnd.ksql.v1+json; charset=utf-8'",
            "-d", data]
        # print(' '.join(cmd))
        ignore_err = True if timeout is not None else False
        ret = subprocess.run(cmd, check=True, capture_output=True)
        return ret.stdout.decode('utf8')
        

    def test_basic():
        """ksqlDB 기본 테스트."""
        props = {
            "ksql.streams.auto.offset.reset": "earliest",
        }        

        # 토픽 확인
        ret = ksql_exec('SHOW TOPICS', 'ksql')
        ret = eval(ret)[0]
        topics = ret['topics']
        assert len(topics) >= 8

        # 토픽에서 스트림 생성
        sql = '''
        DROP STREAM IF EXISTS person;
        CREATE STREAM person (
            regdt TIMESTAMP,
            pid INT, 
            sid INT,
            name VARCHAR, address VARCHAR,
            ip VARCHAR, birth INT, company VARCHAR, phone VARCHAR)
            with (kafka_topic = 'mysql-person', partitions=8,
                value_format='json');
        '''
        ret = ksql_exec(sql, 'ksql', props)
        ret = ret.replace('null', 'None')
        status = eval(ret)[0]['commandStatus']['status']
        assert 'SUCCESS' == status

        # 스트림 내용 확인
        sql = '''
        SELECT * FROM person LIMIT 3
        '''
        ret = ksql_exec(sql, 'query', props)
        first = eval(ret.split('\n')[1])
        dt_parse(first[0])


  test_etc.py: |
    import urllib
    from urllib.request import urlopen

    import pytest

    def test_grafana():
        """그라파나 접속 테스트."""
        url = 'http://{{ .Release.Name }}-grafana:3000'
        urlopen(url)

    @pytest.mark.skip(reason="지연으로 인한 잦은 Fail")
    def test_kafkaui():
        """UI for Kafka 접속 테스트."""
        url = 'http://{{ .Release.Name }}-kafka-ui:80'
        urlopen(url)

    def test_prometheus():
        """프로메테우스 접속 테스트."""
        url = 'http://{{ .Release.Name }}-prometheus-prometheus:9090'
        urlopen(url)

    def test_k8dashboard():
        """쿠버네티스 대쉬보드 접속 테스트."""
        url = 'http://{{ .Release.Name }}-k8dashboard:8443'
        try:
            urlopen(url)
        except urllib.error.URLError as e:
            if 'CERTIFICATE_VERIFY_FAILED' not in str(e):
                raise e
{{- end }}
