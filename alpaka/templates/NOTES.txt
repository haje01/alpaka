# 설치된 파드 리스트

  kubectl get pods --namespace {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

# 카프카 브로커 호스트명

  {{ .Release.Name }}-kafka

  Ingress (AWS ALB) 주소:
  export ING_URL=$(k get ingress | sed -n 2p | awk '{print $4}')

{{- if .Values.tool.enabled }}

# 알파카 Tool 에 접속

  export ATOOL_POD=$(kubectl get pods -n {{ .Release.Namespace }} -l "app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=alpaka-tool" -o jsonpath="{.items[0].metadata.name}")
  kubectl exec -it $ATOOL_POD -n {{ .Release.Namespace}} -- bash
{{- end }}

{{ if .Values.k8dashboard.enabled -}}
# 쿠버네티스 대쉬보드

  접속 URL:
  echo "$ING_URL:8443"

{{- end }}

{{ if .Values.ui4kafka.enabled }}
# 카프카 UI
  접속 URL:
  echo "$ING_URL:8989"

{{- end }}

{{ if .Values.prometheus.prometheus.enabled -}}
# 프로메테우스

{{- if .Values.prometheus.enabled }}

프로메테우스 접속:

{{- if .Values.prometheus.prometheus.ingress.enabled }}

  You should be able to access your new Prometheus installation through

  {{ ternary "https" "http" .Values.prometheus.prometheus.ingress.tls }}://{{ .Values.prometheus.prometheus.ingress.hostname }}

{{- else if contains "LoadBalancer" .Values.prometheus.prometheus.service.type }}

  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        Watch the status with: 'kubectl get svc --namespace {{ include "common.names.namespace" . }} -w {{ template "kube-prometheus.prometheus.fullname" . }}'

{{- $port:=.Values.prometheus.prometheus.service.ports.http | toString }}

    export SERVICE_IP=$(kubectl get svc --namespace {{ include "common.names.namespace" . }} {{ template "kube-prometheus.prometheus.fullname" . }} --template "{{ "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}" }}")
    echo "Prometheus URL: http://$SERVICE_IP{{- if ne $port "80" }}:{{ .Values.prometheus.prometheus.service.ports.http }}{{ end }}/"

{{- else if contains "ClusterIP"  .Values.prometheus.prometheus.service.type }}
    접속 URL:
    echo "$ING_URL:9090"

{{- else if contains "NodePort" .Values.prometheus.prometheus.service.type }}

    export NODE_PORT=$(kubectl get --namespace {{ include "common.names.namespace" . }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "kube-prometheus.prometheus.fullname" . }})
    export NODE_IP=$(kubectl get nodes --namespace {{ include "common.names.namespace" . }} -o jsonpath="{.items[0].status.addresses[0].address}")
    echo "Prometheus URL: http://$NODE_IP:$NODE_PORT/"

{{- end }}
{{- end }}

{{- if and .Values.prometheus.prometheus.thanos.create }}

Thanos Sidecar can be accessed via port "{{ .Values.prometheus.prometheus.thanos.service.ports.grpc }}" on the following DNS name from within your cluster:

    {{ template "kube-prometheus.thanos.fullname" . }}.{{ include "common.names.namespace" . }}.svc.cluster.local

{{- if .Values.prometheus.prometheus.thanos.ingress.enabled }}

  You should be able to access your new Thanos Sidecar installation through

  {{ ternary "https" "http" .Values.prometheus.prometheus.thanos.ingress.tls }}://{{ .Values.prometheus.prometheus.thanos.ingress.hostname }}

{{- end }}
{{- end }}

{{- if .Values.prometheus.alertmanager.enabled }}

얼러트매니저 접속:

{{- if .Values.prometheus.alertmanager.ingress.enabled }}

  You should be able to access your new Prometheus installation through

  {{ ternary "https" "http" .Values.prometheus.alertmanager.ingress.tls }}://{{ .Values.prometheus.alertmanager.ingress.hostname }}

{{- else if contains "LoadBalancer" .Values.prometheus.alertmanager.service.type }}

  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        Watch the status with: 'kubectl get svc --namespace {{ include "common.names.namespace" . }} -w {{ template "kube-prometheus.alertmanager.fullname" . }}'

{{- $port:=.Values.prometheus.alertmanager.service.ports.http | toString }}

    export SERVICE_IP=$(kubectl get svc --namespace {{ include "common.names.namespace" . }} {{ template "kube-prometheus.alertmanager.fullname" . }} --template "{{ "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}" }}")
    echo "Alertmanager URL: http://$SERVICE_IP{{- if ne $port "80" }}:{{ .Values.prometheus.alertmanager.service.ports.http }}{{ end }}/"

{{- else if contains "ClusterIP"  .Values.prometheus.alertmanager.service.type }}
    접속 URL:
    echo "$ING_URL:9093"

{{- else if contains "NodePort" .Values.prometheus.alertmanager.service.type }}

    export NODE_PORT=$(kubectl get --namespace {{ include "common.names.namespace" . }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "kube-prometheus.alertmanager.fullname" . }})
    export NODE_IP=$(kubectl get nodes --namespace {{ include "common.names.namespace" . }} -o jsonpath="{.items[0].status.addresses[0].address}")
    echo "Alertmanager URL: http://$NODE_IP:$NODE_PORT/"

{{- end }}
{{- end }}

{{- end }}

{{ if .Values.grafana.enabled -}}
# 그라파나
  접속 URL:
  echo "$ING_URL:3000"

  유저: admin 
  암호: admindjemals (admin어드민)
{{- end }}

{{ if .Values.test.enabled }}
# 테스트용 MySQL 

root 사용자 암호

  MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace {{ include "common.names.namespace" . }} {{ template "mysql.secretName" .Subcharts.mysql }} -o jsonpath="{.data.mysql-root-password}" | base64 -d)

# 테스트 로그 확인

  kubectl logs job/test

{{- end }}