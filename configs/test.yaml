# 테스트용 설정 파일
provider: N/A

# 카프카 설정
kafka:
  replicaCount: 1
  defaultReplicationFactor: 1
  numPartitions: 8

  metrics:
    kafka:
      enabled: true
    jmx:
      enabled: true
    serviceMonitor:
      enabled: true
      relabelings:
        - sourceLabels: ["container", "pod"]
          regex: "jmx-exporter;"
          replacement: jmx
          targetLabel: job
        # 인스턴스 값을 IP 가 아닌 Pod 명으로 
        - regex: "instance"
          action: labeldrop
        - sourceLabels: ["pod"]
          targetLabel: instance
      metricRelabelings:
        # 인스턴스 값을 IP 가 아닌 Pod 명으로 
        - regex: "instance"
          action: labeldrop
        - sourceLabels: ["pod"]
          targetLabel: instance

  zookeeper:
    enabled: true
    replicaCount: 1
    tolerations:
      - key: "ctrl"
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        interval: 10s
        scrapeTimeout:  5s
        relabelings: 
          - replacement: zookeeper
            targetLabel: job
          # 인스턴스 값을 IP 가 아닌 Pod 명으로 
          - regex: "instance"
            action: labeldrop
          - sourceLabels: ["pod"]
            targetLabel: instance
        metricRelabelings:
          # 인스턴스 값을 IP 가 아닌 Pod 명으로 
          - regex: "instance"
            action: labeldrop
          - sourceLabels: ["pod"]
            targetLabel: instance

  deleteTopicEnable: true
  podLabels:
    job: kafka


# 프로메테우스 설정
prometheus:
  enabled: true
  prometheus:
    enabled: true
    additionalScrapeConfigs:
      enabled: true
      type: internal
      internal:
        jobList:
        - job_name: kminion-metrics
          scrape_interval: 10s
          scrape_timeout:  5s
          metrics_path: "/metrics"
          static_configs:
          - targets:
            - test-kminion:8080
        - job_name: zookeeper
          scrape_interval: 10s
          scrape_timeout:  5s
          metrics_path: "/metrics"
          static_configs:
          - targets:
            - test-zookeeper-metrics:9141


# 쿠버네티스 대쉬보드 설정
k8dashboard:
  enabled: true
  service:
    externalPort: 8443
  serviceAccount:
    name: k8dash-admin
  extraArgs:
    - --token-ttl=86400
    - --enable-skip-login 
  tolerations:
  - key: type
    operator: "Equal"
    value: "ctrl"
    effect: "NoSchedule"


# 알파카 Tool 설정
tool:
  enabled: true
  name: alpaka-tool
  podLabels: {}
  podAnnotations: {}
  container:
    image: "haje01/alpaka-tool"
    tag: 0.0.1
    pullPolicy: IfNotPresent
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  dnsConfig:
    options:
      - name: ndots
        value: "2"


# 카프카 DB 관련 커넥터 설정
dbcon:
  enabled: true
  replicaCount: 1
  kafkaClientPort: 9092
  container:
    image: "haje01/kafka-dbcon"
    tag: 0.0.1
    pullPolicy: IfNotPresent
  timezone: Asia/Seoul
  config:
    db:
      type: mysql
      addr: test-mysql-headless
      port: 3306
      name: test
      timezone: Asia/Seoul
      user: root
      password: mypass
    mode: bulk
    topic: 
      prifix: mysql-
    poll:
      interval_ms: "3600000"
    tasks:
      max: 1


# UI for 카프카 설정
kafka-ui:
  enabled: true
  yamlApplicationConfig:
    kafka:
      clusters:
        - name: test-kafka
          bootstrapServers: test-kafka-headless:9092
          zookeeper: test-zookeeper-headless:2181
          kafkaConnect:
            - name: dbcon
              address: http://test-alpaka-dbcon:8083
          metrics:
            port: 5556
            type: JMX
    auth:
      type: disabled
    management:
      health:
        ldap:
          enabled: false
  tolerations:
  - key: type
    operator: "Equal"
    value: "ctrl"
    effect: "NoSchedule"


# 그라파나 설정
grafana:
  enabled: true
  adminSecretName: test-grafana-admin
  admin:
    user: admin
    password: admindjemals
  datasources:
    secretDefinition:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://test-prometheus-prometheus:9090
          isDefault: true
  dashboardsProvider:
    enabled: true
  dashboardsConfigMaps:
    - configMapName: test-alpaka-grafana-cluster
      fileName: kminion-cluster_rev1.json
    - configMapName: test-alpaka-grafana-topic
      fileName: kminion-topic_rev1.json
    - configMapName: test-alpaka-grafana-groups
      fileName: kminion-groups_rev1.json
    - configMapName: test-alpaka-grafana-zookeeper
      fileName: zookeeper-by-prometheus_rev4.json
    - configMapName: test-alpaka-grafana-jvm
      fileName: altassian-overview_rev1.json


# 그라파나용 KMinion 대쉬보드 설정
kminion:
  enabled: true
  kminion:
    config:
      kafka:
        brokers: ["test-kafka-headless:9092"]

    exporter:
      host: "test-kminion"
      port: 8080

  service:
    annotations:
      prometheus.io/probe: kminion

#
# 테스트 용
#

# MySQL
mysql_enabled: true
mysql:
  auth:
    password: mypass
    rootPassword: mypass

# 초기화 job
init:
  enabled: true
  container:
    image: "haje01/alpaka-tool"
    tag: 0.0.1
    pullPolicy: IfNotPresent
  files:
    wait-mysql.sh: |
      while ! mysqladmin ping -h test-mysql-headless --silent; do
          sleep 1
      done      
    dbcon-reg-mysql.sh: |
      curl -X POST http://test-alpaka-dbcon:8083/connectors -H "Content-Type: application/json" -d '{
        "name": "jdbc_source_mysql",
        "config": {
            "mode": "bulk",
            "connection.url": "jdbc:mysql://test-mysql-headless:3306/test?serverTimezone=Asia/Seoul",
            "connection.user": "root",
            "connection.password": "mypass",
            "poll.interval.ms": 3600000,
            "topic.prefix": "mysql-",
            "tasks.max": 1,
            "connector.class" : "io.confluent.connect.jdbc.JdbcSourceConnector"
          }
        }'
  commands:
    - wait-mysql.sh
    - mysql -h test-mysql-headless -u root -pmypass < /tmp/init.sql
    - sleep 10
    - dbcon-reg-mysql.sh


# 테스트 job

